apply plugin: 'java'

sourceSets.main.java.srcDirs = ['src/']
sourceSets.main.resources.srcDirs += ['resources/']
sourceSets.main.resources.srcDirs += ["$rootDir/demo/assets/"]

ext.mainClassName = "com.crashinvaders.vfx.demo.desktop.DesktopLauncher"
ext.assetsDir = new File("../assets")

dependencies {
    runtime files('resources')
    compile project(':demo:core')
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}
dist.dependsOn classes

task generateDtd(dependsOn: classes, type: JavaExec) {
    main = 'com.crashinvaders.vfx.demo.desktop.DtdSchemaGenerator'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = project.rootDir
    ignoreExitValue = true
}
