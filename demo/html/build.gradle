apply plugin: 'java'
apply plugin: "gwt"
apply plugin: "war"

sourceCompatibility = 1.7
sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs += ['../assets']

gwt {
    gwtVersion = gwtLibVersion
    maxHeapSize = "1G"          // Default 256m is not enough for gwt compiler. GWT is HUNGRY
    minHeapSize = "1G"

    src = files(file("src/")) // Needs to be in front of "modules" below.
    modules 'com.crashinvaders.vfx.demo.GdxDefinition'
    devModules 'com.crashinvaders.vfx.demo.GdxDefinitionSuperdev'
    project.webAppDirName = 'webapp'

    compiler {
        strict = true
        disableCastChecking = true
    }
}

dependencies {
    compile project(":demo:core")
    compile project(":gdx-vfx:gwt")
    compile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
    compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
    compile "com.github.czyzby:gdx-lml:$lmlVersion:sources"
    compile "com.github.czyzby:gdx-kiwi:$lmlVersion:sources"
}

import org.wisepersist.gradle.plugins.gwt.GwtSuperDev

task startHttpServer () {
    dependsOn draftCompileGwt

    String output = project.buildDir.path + "/gwt/draftOut"

    doLast {
        copy {
            from "webapp"
            into output
        }

        copy {
            from "war"
            into output
        }

        HttpFileServer server = new SimpleHttpFileServerFactory().start(new File(output), 22088)

        println "Server started in directory " + server.getContentRoot() + ", http://localhost:" + server.getPort()
    }
}

task superDev (type: GwtSuperDev) {
    dependsOn startHttpServer
    doFirst {
        gwt.modules = gwt.devModules
    }
}

task dist(dependsOn: [clean, compileGwt]) {
    doLast {
        file("build/dist").mkdirs()
        copy {
            from "build/gwt/out"
            into "build/dist"
        }
        copy {
            from "webapp"
            into "build/dist"
            }
        copy {
            from "war"
            into "build/dist"
        }
    }
}

task addSource {
    doLast {
        sourceSets.main.compileClasspath += files(project(':gdx-vfx:core').sourceSets.main.allJava.srcDirs)
        sourceSets.main.compileClasspath += files(project(':gdx-vfx:effects').sourceSets.main.allJava.srcDirs)
        sourceSets.main.compileClasspath += files(project(':gdx-vfx:gwt').sourceSets.main.allJava.srcDirs)
        sourceSets.main.compileClasspath += files(project(':demo:core').sourceSets.main.allJava.srcDirs)
    }
}
tasks.compileGwt.dependsOn(addSource)
tasks.draftCompileGwt.dependsOn(addSource)